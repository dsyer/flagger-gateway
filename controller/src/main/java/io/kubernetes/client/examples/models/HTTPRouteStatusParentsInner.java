/*
 * HTTPRoute
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.examples.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.examples.models.HTTPRouteStatusParentsInnerConditionsInner;
import io.kubernetes.client.examples.models.HTTPRouteStatusParentsInnerParentRef;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * RouteParentStatus describes the status of a route with respect to an associated Parent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HTTPRouteStatusParentsInner {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<HTTPRouteStatusParentsInnerConditionsInner> conditions;

  public static final String SERIALIZED_NAME_CONTROLLER_NAME = "controllerName";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_NAME)
  private String controllerName;

  public static final String SERIALIZED_NAME_PARENT_REF = "parentRef";
  @SerializedName(SERIALIZED_NAME_PARENT_REF)
  private HTTPRouteStatusParentsInnerParentRef parentRef;

  public HTTPRouteStatusParentsInner() {
  }

  public HTTPRouteStatusParentsInner conditions(List<HTTPRouteStatusParentsInnerConditionsInner> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public HTTPRouteStatusParentsInner addConditionsItem(HTTPRouteStatusParentsInnerConditionsInner conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions describes the status of the route with respect to the Gateway. Note that the route&#39;s availability is also subject to the Gateway&#39;s own status conditions and listener status.   If the Route&#39;s ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway&#39;s controller has sufficient access, then that Gateway&#39;s controller MUST set the \&quot;Accepted\&quot; condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why.   A Route MUST be considered \&quot;Accepted\&quot; if at least one of the Route&#39;s rules is implemented by the Gateway.   There are a number of cases where the \&quot;Accepted\&quot; condition may not be set due to lack of controller visibility, that includes when:   * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
   * @return conditions
  **/
  @javax.annotation.Nullable

  public List<HTTPRouteStatusParentsInnerConditionsInner> getConditions() {
    return conditions;
  }


  public void setConditions(List<HTTPRouteStatusParentsInnerConditionsInner> conditions) {
    this.conditions = conditions;
  }


  public HTTPRouteStatusParentsInner controllerName(String controllerName) {
    
    this.controllerName = controllerName;
    return this;
  }

   /**
   * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass.   Example: \&quot;example.net/gateway-controller\&quot;.   The format of this field is DOMAIN \&quot;/\&quot; PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).   Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
   * @return controllerName
  **/
  @javax.annotation.Nonnull

  public String getControllerName() {
    return controllerName;
  }


  public void setControllerName(String controllerName) {
    this.controllerName = controllerName;
  }


  public HTTPRouteStatusParentsInner parentRef(HTTPRouteStatusParentsInnerParentRef parentRef) {
    
    this.parentRef = parentRef;
    return this;
  }

   /**
   * Get parentRef
   * @return parentRef
  **/
  @javax.annotation.Nonnull

  public HTTPRouteStatusParentsInnerParentRef getParentRef() {
    return parentRef;
  }


  public void setParentRef(HTTPRouteStatusParentsInnerParentRef parentRef) {
    this.parentRef = parentRef;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPRouteStatusParentsInner htTPRouteStatusParentsInner = (HTTPRouteStatusParentsInner) o;
    return Objects.equals(this.conditions, htTPRouteStatusParentsInner.conditions) &&
        Objects.equals(this.controllerName, htTPRouteStatusParentsInner.controllerName) &&
        Objects.equals(this.parentRef, htTPRouteStatusParentsInner.parentRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, controllerName, parentRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPRouteStatusParentsInner {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    controllerName: ").append(toIndentedString(controllerName)).append("\n");
    sb.append("    parentRef: ").append(toIndentedString(parentRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

