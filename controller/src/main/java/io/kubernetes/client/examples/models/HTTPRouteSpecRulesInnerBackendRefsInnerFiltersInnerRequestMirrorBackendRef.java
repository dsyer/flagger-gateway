/*
 * HTTPRoute
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.examples.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * BackendRef references a resource where mirrored requests are sent.   Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef.   If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \&quot;ResolvedRefs\&quot; condition on the Route status is set to &#x60;status: False&#x60; and not configure this backend in the underlying implementation.   If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the \&quot;ResolvedRefs\&quot;  condition on the Route is set to &#x60;status: False&#x60;, with the \&quot;RefNotPermitted\&quot; reason and not configure this backend in the underlying implementation.   In either error case, the Message of the &#x60;ResolvedRefs&#x60; Condition should be used to provide more detail about the problem.   Support: Extended for Kubernetes Service   Support: Implementation-specific for any other resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef {
  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef() {
  }

  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef group(String group) {
    
    this.group = group;
    return this;
  }

   /**
   * Group is the group of the referent. For example, \&quot;gateway.networking.k8s.io\&quot;. When unspecified or empty string, core API group is inferred.
   * @return group
  **/
  @javax.annotation.Nullable

  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    this.group = group;
  }


  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef kind(String kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * Kind is the Kubernetes resource kind of the referent. For example \&quot;Service\&quot;.   Defaults to \&quot;Service\&quot; when not specified.   ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services.   Support: Core (Services with a type other than ExternalName)   Support: Implementation-specific (Services with type ExternalName)
   * @return kind
  **/
  @javax.annotation.Nullable

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    this.kind = kind;
  }


  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name is the name of the referent.
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.   Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace&#39;s owner to accept the reference. See the ReferenceGrant documentation for details.   Support: Core
   * @return namespace
  **/
  @javax.annotation.Nullable

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nullable

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef = (HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef) o;
    return Objects.equals(this.group, htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef.group) &&
        Objects.equals(this.kind, htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef.kind) &&
        Objects.equals(this.name, htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef.name) &&
        Objects.equals(this.namespace, htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef.namespace) &&
        Objects.equals(this.port, htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, kind, name, namespace, port);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef {\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

