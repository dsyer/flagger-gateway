/*
 * HTTPRoute
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.examples.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HTTPRouteStatusParentsInnerParentRef {
  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_SECTION_NAME = "sectionName";
  @SerializedName(SERIALIZED_NAME_SECTION_NAME)
  private String sectionName;

  public HTTPRouteStatusParentsInnerParentRef() {
  }

  public HTTPRouteStatusParentsInnerParentRef group(String group) {
    
    this.group = group;
    return this;
  }

   /**
   * Group is the group of the referent. When unspecified, \&quot;gateway.networking.k8s.io\&quot; is inferred. To set the core API group (such as for a \&quot;Service\&quot; kind referent), Group must be explicitly set to \&quot;\&quot; (empty string).   Support: Core
   * @return group
  **/
  @javax.annotation.Nullable

  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    this.group = group;
  }


  public HTTPRouteStatusParentsInnerParentRef kind(String kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * Kind is kind of the referent.   There are two kinds of parent resources with \&quot;Core\&quot; support:   * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only)   Support for other resources is Implementation-Specific.
   * @return kind
  **/
  @javax.annotation.Nullable

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    this.kind = kind;
  }


  public HTTPRouteStatusParentsInnerParentRef name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name is the name of the referent.   Support: Core
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public HTTPRouteStatusParentsInnerParentRef namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route.   Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.      Support: Core
   * @return namespace
  **/
  @javax.annotation.Nullable

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public HTTPRouteStatusParentsInnerParentRef sectionName(String sectionName) {
    
    this.sectionName = sectionName;
    return this;
  }

   /**
   * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:   * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose.   Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.   When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.   Support: Core
   * @return sectionName
  **/
  @javax.annotation.Nullable

  public String getSectionName() {
    return sectionName;
  }


  public void setSectionName(String sectionName) {
    this.sectionName = sectionName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPRouteStatusParentsInnerParentRef htTPRouteStatusParentsInnerParentRef = (HTTPRouteStatusParentsInnerParentRef) o;
    return Objects.equals(this.group, htTPRouteStatusParentsInnerParentRef.group) &&
        Objects.equals(this.kind, htTPRouteStatusParentsInnerParentRef.kind) &&
        Objects.equals(this.name, htTPRouteStatusParentsInnerParentRef.name) &&
        Objects.equals(this.namespace, htTPRouteStatusParentsInnerParentRef.namespace) &&
        Objects.equals(this.sectionName, htTPRouteStatusParentsInnerParentRef.sectionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, kind, name, namespace, sectionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPRouteStatusParentsInnerParentRef {\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    sectionName: ").append(toIndentedString(sectionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

