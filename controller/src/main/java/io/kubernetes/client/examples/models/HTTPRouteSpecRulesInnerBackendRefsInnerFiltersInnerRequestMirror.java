/*
 * HTTPRoute
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.examples.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.examples.models.HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef;
import java.io.IOException;

/**
 * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.   This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends.   Support: Extended
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror {
  public static final String SERIALIZED_NAME_BACKEND_REF = "backendRef";
  @SerializedName(SERIALIZED_NAME_BACKEND_REF)
  private HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef backendRef;

  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror() {
  }

  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror backendRef(HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef backendRef) {
    
    this.backendRef = backendRef;
    return this;
  }

   /**
   * Get backendRef
   * @return backendRef
  **/
  @javax.annotation.Nonnull

  public HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef getBackendRef() {
    return backendRef;
  }


  public void setBackendRef(HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirrorBackendRef backendRef) {
    this.backendRef = backendRef;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror = (HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror) o;
    return Objects.equals(this.backendRef, htTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror.backendRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPRouteSpecRulesInnerBackendRefsInnerFiltersInnerRequestMirror {\n");
    sb.append("    backendRef: ").append(toIndentedString(backendRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

